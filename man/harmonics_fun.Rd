% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/harmonics_fun.R
\name{harmonics_fun}
\alias{harmonics_fun}
\title{Harmonic modelling}
\usage{
harmonics_fun(user_vals, user_dates, harmonic_deg, ref_date)
}
\arguments{
\item{user_vals}{A vector with numeric values.}

\item{user_dates}{A Vector with Date objects. See \code{\link[base]{as.Date}}.}

\item{harmonic_deg}{Numeric. The number of cycles per year that should be modelled.}

\item{ref_date}{(optional) A Date object. Default is 1970-01-01.}
}
\value{
A numeric vector with the fitted values.
}
\description{
This function enables the user to model different number of cycles per year
}
\examples{

library(ggplot2)

# Load sample NDVI time-series data.frame
ndvi_df <- base::readRDS(system.file(package = "rHarmonics",
                                     "extdata", "MODIS_NDVI_TimeSeries.rda"))

# Apply harmonic function using 3 cycles per year
fitted_3rd_deg <- harmonics_fun(user_vals <- ndvi_df$ndvi,
                                user_dates = ndvi_df$dates,
                                harmonic_deg <- 3)

# Combine fitted values with original df
combined_df <- cbind(ndvi_df, fitted_3rd_deg)
names(combined_df) <- c("dates", "ndvi", "fitted")

# Plot original data with fitted values
ggplot2::ggplot() +
  geom_point(data=combined_df, aes(x = dates, y = ndvi), color='black', size=1) +
  geom_line(data=combined_df, aes(x = dates, y = fitted), colour = "red", size=1)+
  labs(title="MODIS NDVI TimeSeries with fitted values", x="Date", y="NDVI") +
  theme(plot.title = element_text(hjust = 0.5, face="bold", size=14),
        axis.text=element_text(size=10),
        axis.title=element_text(size=12),
        legend.title=element_text(size=13, face="bold"),
        legend.text=element_text(size=13))+
  ylim(0,1)


# Apply harmonic function on multi-layer raster file

library(raster)

# Load sample cloud- and snow-free MODIS TimeSeries
sample_raster <- raster::brick(system.file(package = "rHarmonics",
                                           "extdata",
                                           "MODIS_NDVI_stack.tif"))

# Convert raster stack to matrix
sample_matrix <- as.matrix(sample_raster)

# Flip rows and columns
# -> Each column represents the NDVI time-series in one pixel
sample_matrix_T <- t(sample_matrix)

# Each column represents one cell
mat_fitted <- apply(sample_matrix_T, 2, harmonics_fun,
                    user_dates = ndvi_df$dates,
                    harmonic_deg <- 3)

# Define new raster
new_raster <- sample_raster

# Fill values on new raster layer based on data.frame
for (i in 1:ncol(mat_fitted)) {
  # Fill each cell of the new raster with the fitted values
  # stored in each column of the matrix
  new_raster[i] <- mat_fitted[,i]
}

}
